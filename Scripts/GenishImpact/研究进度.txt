已知事实：
1.不管是naraka还是genshin，pointlist都只出现在文件名包含ROOT VS的文件中

问题列表：
1.原神中,Pointlist技术有10个元素，trianglelist有8个元素
已解决
2.原神中，真正装载了pointlist技术的文件，是没有ib文件的，也就是说对于
缺失ib文件的处理，并不能直接跳过，而是要把它默认算作使用到了pointlist技术，然后直接读取vb文件。
仍有疑问
3.经过观察发现，会有很多重复的ib，但是它们的vb却不一样，然而原神的脚本最终的vb却是相同的
4.原神脚本中对于TEXCOORD下面TEXCOORD1和TEXCOORD相同数值的处理是全部置为0??
5.原神中使用的TEXCOORD只有两个坐标？为什么不是4个坐标？？
6.最新发现：POSITION NORMAL TANGENT BLENDWEIGHT BLENDINDICES是从pointlist获取的
 COLOR TEXCOORD TEXCOORD1是从原vb文件获取的。

7.最新发现，类似下面这样
vb0[0]+000 POSITION: -0.0831520855, 1.34525275, 0.0606771298
vb0[0]+012 NORMAL: -0.752751052, -0.00469633425, 0.658288538
vb0[0]+000 COLOR: 0.643137276, 0.294117659, 0.666666687, 0.741176486
vb0[0]+000 TEXCOORD: 0.643137276, 0.294117659, 0.666666687, 0.741176486
vb0[0]+000 TEXCOORD1: 0.643137276, 0.294117659, 0.666666687, 0.741176486
vb0[0]+000 TEXCOORD2: 0.643137276, 0.294117659, 0.666666687, 0.741176486
vb0[0]+000 TEXCOORD3: 0.643137276, 0.294117659, 0.666666687, 0.741176486
vb0[0]+024 TANGENT: -0.705350041, 0, 0.708859146, 1
如果pointlist出现多个值相同，那么这些值都是错误的，如果trianglelist出现，那么这些值也同样都是错误的，需要转而使用trianglelist/pointlist中对应的值


8.COLOR的正确长度是4，R8G8B8A8_UNORM,所以TEXCOORD长度为12的原因是，4个长度的COLOR + 8个长度的TEXCOORD