永劫无间到此告一段落，因为实在无法解决以下几个问题：
1.导出的txt看起来没问题，但是导入到游戏内之后，模型是躺着的，没有骨骼动画
2.导出的txt中COLOR和TEXCOORD1、2、3、4、5、6、7的值都相同，但是并不知道原因
3.只能导入TEXCOORD1、2、3、4、5、6、7中的一个，重复会导致满屏幕，缺少也会导致满屏幕白光，这个原因是什么？

目前可以确定的是：
1.可以成功导入模型到blender，并且是初始姿势，怀疑姿势和POSITION有关。
2.大概判断骨骼要么是vs-cb3，要么是vs-cb4，还不能完全确定。
3.导入的顶点组应该是正确的，因为在weights模式下，选中不同的顶点组后模型的颜色不同。
4.COLOR必须导入，不然模型会崩坏，尽管COLOR和TEXCOORD1的值完全相通，但格式不同。
5.使用pointlist技术后，在对应的trianglelist中的信息几乎都是错误的，必须得用原始的pointlist替换


先去试试别的游戏，看看能不能在思路上有所收获
实验目标：
1.测试不同方式导出后，再导入游戏中效果是否相同
经测试，导出的信息几乎与导出方式无关，关键步骤应该还在于pointlist替换
所以目前要先实现输出对应的pointlist和trianglelist的文件索引
2.经过观察，trianglelist中没有COLOR属性，但所有TEXCOORD1属性相通
pointlist中有COLOR属性，但所有TEXCOORD1、2、3、4、5、6、7都和COLOR属性值相同
两个推测：
1.确实不需要COLOR属性，导入后出现魔方状是因为TEXCOORD格式设置不正确导致
2.需要COLOR属性，而不需要TEXCOORD1属性，但是之前导入进去是白光，所以第一种可能比较大
3.根本就没有TEXCOORD1、2、3、4、5、6、7，那只是预留的7个属性，根本用不上，只有TEXCOORD就可以了，因为原神最后的结果也是只有一个原始TEXCOORD

实验：
1.删除TEXCOORD1，只保留TEXCOORD，导入游戏查看效果
结果：替换vb0后全是白色光芒
2.去除TEXCOORD1，去除COLOR           全是白色光芒
3.补上TEXCOORD1，并去除COLOR    一堆魔方
4.修正TEXCOORD1的格式为A8_UNORM那个 小魔方变成了大魔方
5.如果4不行，就加上COLOR再试一次   横躺模型  ，说明COLOR是有用的，横躺模型是因为缺失了骨骼数据？

推测：实际骨骼是存放于身体模型中的，所以要导出并导回身体模型进行测试，如果要让衣服也动起来，就需要给衣服刷身体的权重，这个在视频里也有体现。
实验：
1.导出身体，直接导回测试
使用身体也是一样横躺着的，我服了
再仔细看一遍原神教程里，看看是不是漏了什么

替换vb0会横躺，替换vb1就没事，但是会造成模型乱七八糟，怀疑是TEXCOORD1的值不对
到目前位置最有可能的就是替换vb1，但是uv坐标不对，而UV坐标就是从TEXCOORD中来的，所以TEXCOORD1必须有，TEXCOORD也必须有
所以怀疑正确的TEXCOORD坐标实际上不在pointlist中，现在开始测试
算了，还是先做其它游戏的mod来积累经验吧，累了，这玩意没人指路真的难顶。


搜索了一下：
I think you should have noticed that some of the VB/IB files unpacked using g1m_export are not readable by blender, mainly the hair and clothing parts, the positions of these files are 4D(x,y,z,w) data, not the usual 3D(x,y,z) data, so the generic blender_ 3dmigoto.py plugin does not recognize them.
Maybe someone has already made a plugin that can read 4D mesh properly, but I didn't find it.
The only plugin I found was this one.
https://www.loverslab.com/topic/178718-fatal-frame-maiden-of-the-black-water-nude-mods/?do=findComment&comment=3746272

Unfortunately it reads 4D mesh, but the shape and position is not correct.
If I use noesis and g1m2fbx, the fbx model I get, the shape and position is also wrong.
原来是目前的3dmigoto导入脚本无法正确导入4d的衣服，那试试原神的导入脚本？？


最新进度，发现一些皮肤是由vb0和vb1组成，一般vb1中存放TEXCOORD的信息，而TEXCOORD1、2、3、4、5、6、7都是不存在的
所以我们最终导出的vb文件必须包含TEXCOORD信息，且参考了一个split脚本，需要将vb文件切割为vb0，vb1
但是他的切割文件是有问题的，所以需要我自己写一个切割脚本
然后就是TEXCOORD1其实是不用保留的，只需要TEXCOORD，之所以之前导入到游戏后全是白光，那是因为缺少了TEXCOORD信息，也就是UV信息
导致UV材质无法正确覆盖上去，所以产生了白光，推测白光可能是底部的光源。
所以，现在开始研究split脚本。



观察发现，最终的vb文件是这样，没有blendwight等信息，也就是只有POSITION、NORMAL、TANGENT三种信息在vb0 ，TEXCOORD一种信息在VB1
vb0[0]+000 POSITION: 0.0623825192, 0.0440697819, 0.280035198
vb0[0]+012 NORMAL: 0.109487124, -0.540115118, -0.833635986
vb0[0]+000 TANGENT: 0.815686285, 0.517647088, 0.498039216, 0.239215687
vb0[0]+000 COLOR: 0.815686285, 0.517647088, 0.498039216, 0.239215687
vb0[0]+000 TEXCOORD1: 0.815686285, 0.517647088, 0.498039216, 0.239215687
vb0[0]+000 TEXCOORD2: 0.815686285, 0.517647088, 0.498039216, 0.239215687
vb0[0]+000 TEXCOORD3: 0.815686285, 0.517647088, 0.498039216, 0.239215687
vb0[0]+000 TEXCOORD4: 0.815686285, 0.517647088, 0.498039216, 0.239215687
vb0[0]+000 TEXCOORD5: 0.815686285, 0.517647088, 0.498039216, 0.239215687
vb0[0]+000 TEXCOORD6: 0.815686285, 0.517647088, 0.498039216, 0.239215687
vb0[0]+000 TEXCOORD7: 0.815686285, 0.517647088, 0.498039216, 0.239215687
vb0[0]+000 BLENDWEIGHTS: 0.815686285, 0.517647088, 0.498039216, 0.239215687
vb0[0]+000 BLENDINDICES: 0.815686285, 0.517647088, 0.498039216, 0.239215687

但是有的会额外多出vb3，多一个TEXCOORD4的属性

经研究发现，原始的pointlist中
vb0存放POSITION，NORMAL。TANGENT，COLOR
vb1存放TEXCOORD
vb2存放BLENDWEIGHTS，BLENDINDICES


分割脚本用到了.splitdata，好像原神也用到了，为什么？
